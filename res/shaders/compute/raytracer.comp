#version 460 core

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout (rgba32f, binding = 0) uniform image2D imgOutput;

uniform vec3 camCenter;
uniform float camFocalLength;
uniform int texWidth;
uniform int texHeight;
uniform int chunkWidth;
uniform int chunkLength;
uniform int chunkHeight;
uniform int currentLevel;
uniform float randSeed;

struct Block {
    int id;
};

layout (std430, binding = 0) buffer Chunk {
    Block chunk[];
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

void main()
{
/*
    int halfTexWidth = texWidth / 2;
    int halfTexHeight = texHeight / 2;

    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

    vec3 pixelCenter = vec3(
    (texelCoord.x - halfTexWidth) / float(halfTexWidth),
    (texelCoord.y - halfTexHeight) / float(halfTexHeight),
    -camFocalLength
    );
    vec3 rayDir = normalize(pixelCenter);

    Ray r = Ray(camCenter, rayDir);*/

    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

    int x = texelCoord.x % chunkWidth;
    int z = texelCoord.y % chunkLength;
    int y = (texelCoord.x / chunkWidth * (texHeight / chunkWidth)) + texelCoord.y / chunkLength;

    vec4 value = vec4(0.5f, 0.5f, 0.5f, 1);

    if (y > 255)
    {
        value = vec4(0, 0, 0, 1);
    }
    else
    {
        int blockType = chunk[x + z * chunkWidth + y * (chunkWidth * chunkLength)].id;
        value = vec4(blockType == 1 ? vec3(0.3f, 0.3f, 0.3f) : blockType == 2 ? vec3(0.3f, 0.8f, 0.1f) : vec3(1), 1.0f);
    }
    if (texelCoord.x % chunkWidth == 0 || texelCoord.y % chunkLength == 0) value = vec4(1, 0, 0, 1);

    if (y == currentLevel) value *= 0.5f;

    imageStore(imgOutput, texelCoord, value);
}