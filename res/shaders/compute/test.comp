#version 460 core

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout (rgba32f, binding = 0) uniform image2D imgOutput;

uniform vec3 camCenter;
uniform float camFocalLength;
uniform int texWidth;
uniform int texHeight;
uniform float t;

struct Ray
{
    vec3 origin;
    vec3 dir;
};

vec3 RayAt(Ray r, float t)
{
    return r.origin + t * r.dir;
}

float HitSphere(vec3 center, float radius, Ray ray)
{
    vec3 oc = center - ray.origin;
    float a = dot(ray.dir, ray.dir);
    float b = -2.0f * dot(ray.dir, oc);
    float c = dot(oc, oc) - radius * radius;
    float discriminant = b * b - 4 * a * c;

    if (discriminant < 0) {
        return -1.0f;
    } else {
        return (-b - sqrt(discriminant)) / (2.0 * a);
    }
}

vec3 RayColor(Ray ray)
{
    float t = HitSphere(vec3(0.0f, 0.0f, -1.0f), 0.5f, ray);
    if (t > 0.0)
    {
        vec3 N = normalize(RayAt(ray, t) - vec3(0.0f, 0.0f, -1.0f));
        return 0.5f * vec3(N.x + 1.0f, N.y + 1.0f, N.z + 1.0f);
    }

    vec3 unitDir = normalize(ray.dir);
    float a = 0.5f * (unitDir.y + 1.0f);
    return (1.0f - a) * vec3(1.0f, 1.0f, 1.0f) + a * vec3(0.5f, 0.7f, 1.0f);
}

void main()
{
    int halfTexWidth = texWidth / 2;
    int halfTexHeight = texHeight / 2;

    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

    vec3 pixelCenter = vec3(
    (texelCoord.x - halfTexWidth) / float(halfTexWidth),
    (texelCoord.y - halfTexHeight) / float(halfTexHeight),
    -camFocalLength
    );
    vec3 rayDir = pixelCenter - camCenter;

    Ray r = Ray(camCenter, rayDir);
    vec4 value = vec4(RayColor(r), 1.0);

    imageStore(imgOutput, texelCoord, value);
}